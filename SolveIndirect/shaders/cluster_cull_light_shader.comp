#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
#extension GL_GOOGLE_include_directive : require
#include "lights.glsl"
#include "cluster_info.glsl"

shared PointLight sharedLights[16 * 9 * 4];

#define MAX_LIGHTS_PER_CLUSTER 100

layout(push_constant) uniform Constants
{
	mat4 viewMatrix;
    uint numOfLights;
};

layout (set = 0, binding = 2) readonly buffer lightSSBO{
    PointLight pointLight[];
};

layout (set = 0, binding = 3) buffer lightIndexSSBO{
    uint globalLightIndexList[];
};

layout (set = 0, binding = 4) buffer lightGridSSBO{
    LightGrid lightGrid[];
};

layout (set = 0, binding = 5) buffer globalIndexCountSSBO{
    uint globalIndexCount;
};

float SquaredDistancePointAABB(vec3 point, uint tile)
{
	VolumeTileAABB currentCell = cluster[tile];

	float sqDist = 0.0;
	for (uint i = 0; i < 3; ++i)
	{
		float v = point[i];
		if (v < currentCell.minPoint[i])
		{
			float diff = currentCell.minPoint[i] - v;
			sqDist += (diff * diff);
		}
		else if (v > currentCell.maxPoint[i])
		{
			float diff = currentCell.maxPoint[i] - v;
			sqDist += (diff * diff);
		}
	}
   	return sqDist;
}

bool TestSphereAABB(uint lightIndex, uint tile)
{
	float lightRadius = pointLight[lightIndex].range;
	vec4 posWorld = pointLight[lightIndex].position;
	vec4 posView = viewMatrix * posWorld;
	float squaredDistance = SquaredDistancePointAABB(posView.xyz, tile);

	return squaredDistance < (lightRadius * lightRadius);
}

void main()
{
    uint tileIndex = gl_WorkGroupID.x +
		gl_WorkGroupID.y * gl_NumWorkGroups.x +
		gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y;

    uint visibleLightIndices[MAX_LIGHTS_PER_CLUSTER];
	uint numAllLights = numOfLights;

    uint lightIter = 0;
	for (uint i = 0; i < numAllLights && lightIter < MAX_LIGHTS_PER_CLUSTER; ++i)
	{
		if (TestSphereAABB(i, tileIndex))
		{
			visibleLightIndices[lightIter++] = i;
		}
	}
	barrier();
	uint offset = atomicAdd(globalIndexCount, lightIter);
	
	//uint offset = globalIndexCount;
	//globalIndexCount += lightIter;
	
	for (uint i = 0; i < lightIter; ++i)
	{
		globalLightIndexList[offset + i] = visibleLightIndices[i];
	}

	lightGrid[tileIndex].offset = offset;
	lightGrid[tileIndex].count  = lightIter;
}